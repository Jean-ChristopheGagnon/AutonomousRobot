/*
 * SquareDriver.java
 */
package navigation;

import navigation.Odometer;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.lcd.TextLCD;

public class Navigator extends Thread {
	double[] position = new double[3];
	private Odometer odometer;
	private static final int FORWARD_SPEED = 250;
	private static final int ROTATE_SPEED = 150;
	
	public Navigator(Odometer odometer) {
		this.odometer = odometer;
	}

	public static void run(EV3LargeRegulatedMotor leftMotor, EV3LargeRegulatedMotor rightMotor,
			double leftRadius, double rightRadius, double width) {
		// reset the motors
		for (EV3LargeRegulatedMotor motor : new EV3LargeRegulatedMotor[] { leftMotor, rightMotor }) {
			motor.stop();
			motor.setAcceleration(3000);
		}

		// wait 5 seconds
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e) {
			// there is nothing to be done here because it is not expected that
			// the odometer will be interrupted by another thread
		}

			// drive forward two tiles
			leftMotor.setSpeed(FORWARD_SPEED);
			rightMotor.setSpeed(FORWARD_SPEED);
			leftMotor.rotate(convertDistance(leftRadius, 91.44), true);
			rightMotor.rotate(convertDistance(rightRadius, 91.44), false);
			// turn 90 degrees clockwise
			
			leftMotor.setSpeed(ROTATE_SPEED);
			rightMotor.setSpeed(ROTATE_SPEED);
			leftMotor.rotate(convertAngle(leftRadius, width, 90.0), true);
			rightMotor.rotate(-convertAngle(rightRadius, width, 90.0), false);
	}
	
	public void turnTo(EV3LargeRegulatedMotor leftMotor, EV3LargeRegulatedMotor rightMotor,
		double radius, double width, double destX, double destY){
		double[] position = new double[3];
		odometer.getPosition(position, new boolean[] { true, true, true });
		double dx = destX - position[0];
		double dy = destY - position[1];
		double dt = Math.atan(dx/dy) - position[2];
		double dtDegrees = 180*dt/Math.PI;
		if (dtDegrees < 0){
			dtDegrees = dtDegrees + 360;
		}
		if (dtDegrees <= 180){
			leftMotor.setSpeed(ROTATE_SPEED);
			rightMotor.setSpeed(ROTATE_SPEED);
			leftMotor.rotate(convertAngle(radius, width, dtDegrees), true);
			rightMotor.rotate(-convertAngle(radius, width, dtDegrees), false);
		} else {
			dtDegrees = 360 - dtDegrees;
			leftMotor.setSpeed(ROTATE_SPEED);
			rightMotor.setSpeed(ROTATE_SPEED);
			leftMotor.rotate(-convertAngle(radius, width, dtDegrees), true);
			rightMotor.rotate(convertAngle(radius, width, dtDegrees), false);
		}
	}

	private static int convertDistance(double radius, double distance) {
		return (int) ((180.0 * distance) / (Math.PI * radius));
	}

	private static int convertAngle(double radius, double width, double angle) {
		return convertDistance(radius, Math.PI * width * angle / 360.0);
	}
}