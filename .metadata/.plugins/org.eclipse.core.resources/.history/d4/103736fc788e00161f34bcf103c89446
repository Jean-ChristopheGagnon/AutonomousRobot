/*
 * SquareDriver.java
 */
package navigation;

import navigation.Odometer;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.lcd.TextLCD;

public class Navigator extends Thread {
	double[] position = new double[3];
	private Odometer odometer;
	private static final int FORWARD_SPEED = 250;
	private static final int ROTATE_SPEED = 150;
	
	public Navigator(Odometer odometer) {
		this.odometer = odometer;
	}

	public void drive(EV3LargeRegulatedMotor leftMotor, EV3LargeRegulatedMotor rightMotor, double radius, double width, double destX, double destY) {
		// reset the motors
		for (EV3LargeRegulatedMotor motor : new EV3LargeRegulatedMotor[] { leftMotor, rightMotor }) {
			motor.stop();
			motor.setAcceleration(3000);
		}

		// wait 5 seconds
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e) {
			// there is nothing to be done here because it is not expected that
			// the odometer will be interrupted by another thread
		}

			// drive forward two tiles
		//travelTo(leftMotor, rightMotor,radius, width, destX, destY);
		//travelTo(leftMotor, rightMotor,radius, width, 90, 45);
	}
	
	public void travelTo(EV3LargeRegulatedMotor leftMotor, EV3LargeRegulatedMotor rightMotor, double radius, double width, double destX, double destY){
		double[] position = new double[3];
		odometer.getPosition(position, new boolean[] { true, true, true });
		double dx = destX - position[0];
		double dy = destY - position[1];
		double dt = Math.atan(dx/dy) - position[2];
		double dtDegrees = 180*dt/Math.PI;
		if (dtDegrees < 0){
			dtDegrees = dtDegrees + 360;
		}
		turnTo(leftMotor, rightMotor, radius, width, dtDegrees);
		double distance = Math.sqrt((dx*dx)+(dy*dy));
		leftMotor.setSpeed(FORWARD_SPEED);
		rightMotor.setSpeed(FORWARD_SPEED);
		leftMotor.rotate(convertDistance(radius, distance), true);
		rightMotor.rotate(convertDistance(radius, distance), false);
	}
	
	public void turnTo(EV3LargeRegulatedMotor leftMotor, EV3LargeRegulatedMotor rightMotor, double radius, double width, double theta){
		if (theta <= 180){
			leftMotor.setSpeed(ROTATE_SPEED);
			rightMotor.setSpeed(ROTATE_SPEED);
			leftMotor.rotate(convertAngle(radius, width, theta), true);
			rightMotor.rotate(-convertAngle(radius, width, theta), false);
		} else {
			theta = 360 - theta;
		//	leftMotor.setSpeed(ROTATE_SPEED);
		//	rightMotor.setSpeed(ROTATE_SPEED);
		//	leftMotor.rotate(-convertAngle(radius, width, theta), true);
		//	rightMotor.rotate(convertAngle(radius, width, theta), false);
		}//
	}

	private static int convertDistance(double radius, double distance) {
		return (int) ((180.0 * distance) / (Math.PI * radius));
	}

	private static int convertAngle(double radius, double width, double angle) {
		return convertDistance(radius, Math.PI * width * angle / 360.0);
	}
}